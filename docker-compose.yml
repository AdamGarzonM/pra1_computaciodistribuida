version: '3.8'
services:
  ################################## USUARIS ##################################
  ################################## ALBERT  ##################################
  albert_presence:
    build: 
      context: ./sensors/presence
      dockerfile: ../../Dockerfile
    command: python3 -u presencesensor.py
    depends_on:
      - albert_mqtt
    restart: on-failure:10
    environment:
      - PORT=1883
      - BROKER=albert_mqtt

  albert_temp:
    build: 
      context: ./sensors/temperature
      dockerfile: ../../Dockerfile
    command: python3 -u temperaturesensor.py
    depends_on:
      - albert_mqtt
    restart: on-failure:10
    environment:
      - PORT=1883
      - BROKER=albert_mqtt

  ###ACTUADORS:
  albert_light:
    build: 
      context: ./actuators/light
      dockerfile: ../../Dockerfile
    command: python3 -u lightbulb.py
    depends_on:
      - albert_mqtt
    restart: on-failure:10
    environment:
      - BROKER=albert_mqtt

  albert_heat:
    build: 
      context: ./actuators/heat
      dockerfile: ../../Dockerfile
    command: python3 -u heatpump.py
    depends_on:
      - albert_mqtt
    restart: on-failure:10
    environment:
      - BROKER=albert_mqtt
  ############################################################
  albert_mqtt:
    image: eclipse-mosquitto:latest
    volumes:
    - ./config/config1:/mosquitto/config/
    ports: 
    - 1883:1883
    restart: on-failure:10
    environment:
      - BROKER=albert_mqtt

  albert_gateway:
    build: 
      context: ./gateway
      dockerfile: ../Dockerfile
    command: python3 -u gateway.py
    depends_on:
      - albert_mqtt
      - kafka
    environment:
      - BROKER=albert_mqtt
      - PORT=1883
    restart: on-failure:20

      ################################## DAKOTA  ##################################
  dakota_presence:
    build: 
      context: ./sensors/presence
      dockerfile: ../../Dockerfile
    command: python3 -u presencesensor.py
    depends_on:
      - dakota_mqtt
    restart: on-failure:10
    environment:
      - PORT=1884
      - BROKER=dakota_mqtt

  dakota_temp:
    build: 
      context: ./sensors/temperature
      dockerfile: ../../Dockerfile
    command: python3 -u temperaturesensor.py
    depends_on:
      - dakota_mqtt
    restart: on-failure:10
    environment:
      - PORT=1884
      - BROKER=dakota_mqtt

  ###ACTUADORS:
  dakota_light:
    build: 
      context: ./actuators/light
      dockerfile: ../../Dockerfile
    command: python3 -u lightbulb.py
    depends_on:
      - dakota_mqtt
    restart: on-failure:10
    environment:
      - BROKER=dakota_mqtt

  dakota_heat:
    build: 
      context: ./actuators/heat
      dockerfile: ../../Dockerfile
    command: python3 -u heatpump.py
    depends_on:
      - dakota_mqtt
    restart: on-failure:10
    environment:
      - BROKER=dakota_mqtt
  ############################################################
  dakota_mqtt:
    image: eclipse-mosquitto:latest
    volumes:
    - ./config/config2:/mosquitto/config/
    ports: 
    - 1884:1884
    restart: on-failure:10

  dakota_gateway:
    build: 
      context: ./gateway
      dockerfile: ../Dockerfile
    command: python3 -u gateway.py
    depends_on:
      - dakota_mqtt
      - kafka
    environment:
      - BROKER=dakota_mqtt
      - PORT=1884
    restart: on-failure:20

          ################################## Tifany  ##################################
  tifany_presence:
    build: 
      context: ./sensors/presence
      dockerfile: ../../Dockerfile
    command: python3 -u presencesensor.py
    depends_on:
      - tifany_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tifany_mqtt
      - PORT=1885

  tifany_temp:
    build: 
      context: ./sensors/temperature
      dockerfile: ../../Dockerfile
    command: python3 -u temperaturesensor.py
    depends_on:
      - tifany_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tifany_mqtt
      - PORT=1885

  ###ACTUADORS:
  tifany_light:
    build: 
      context: ./actuators/light
      dockerfile: ../../Dockerfile
    command: python3 -u lightbulb.py
    depends_on:
      - tifany_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tifany_mqtt

  tifany_heat:
    build: 
      context: ./actuators/heat
      dockerfile: ../../Dockerfile
    command: python3 -u heatpump.py
    depends_on:
      - tifany_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tifany_mqtt
  ############################################################
  tifany_mqtt:
    image: eclipse-mosquitto:latest
    volumes:
    - ./config/config3:/mosquitto/config/
    ports: 
    - 1885:1885
    restart: on-failure:10

  tifany_gateway:
    build: 
      context: ./gateway
      dockerfile: ../Dockerfile
    command: python3 -u gateway.py
    depends_on:
      - tifany_mqtt
      - kafka
    environment:
      - BROKER=tifany_mqtt
      - PORT=1885
    restart: on-failure:20

   ################################## Tommy  ##################################
  tommy_presence:
    build: 
      context: ./sensors/presence
      dockerfile: ../../Dockerfile
    command: python3 -u presencesensor.py
    depends_on:
      - tommy_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tommy_mqtt
      - PORT=1886

  tommy_temp:
    build: 
      context: ./sensors/temperature
      dockerfile: ../../Dockerfile
    command: python3 -u temperaturesensor.py
    depends_on:
      - tommy_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tommy_mqtt
      - PORT=1886

  ###ACTUADORS:
  tommy_light:
    build: 
      context: ./actuators/light
      dockerfile: ../../Dockerfile
    command: python3 -u lightbulb.py
    depends_on:
      - tommy_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tommy_mqtt

  tommy_heat:
    build: 
      context: ./actuators/heat
      dockerfile: ../../Dockerfile
    command: python3 -u heatpump.py
    depends_on:
      - tommy_mqtt
    restart: on-failure:10
    environment:
      - BROKER=tommy_mqtt
  ############################################################
  tommy_mqtt:
    image: eclipse-mosquitto:latest
    volumes:
    - ./config/config4:/mosquitto/config/
    ports: 
    - 1886:1886
    restart: on-failure:10

  tommy_gateway:
    build: 
      context: ./gateway
      dockerfile: ../Dockerfile
    command: python3 -u gateway.py
    depends_on:
      - tommy_mqtt
      - kafka
    environment:
      - BROKER=tommy_mqtt
      - PORT=1886
    restart: on-failure:20

  ##################################  MICROSERVEIS  ##################################

  cloud_save:
    build: 
      context: ./cloud/save
      dockerfile: ../../Dockerfile
    command: python3 -u save.py
    depends_on:
      - kafka
      - influxdb
    restart: unless-stopped
    environment: 
      DOCKER_INFLUXDB_INIT_ORG: computacio
      DOCKER_INFLUXDB_INIT_BUCKET: computaciobucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: s2d3rf67ren42i0gg666er9
      DOCKER_INFLUXDB_HOSTNAME: influxdb
      DOCKER_INFLUXDB_PORT: 8086


  cloud_clean:
    build: 
      context: ./cloud/clean
      dockerfile: ../../Dockerfile
    command: python3 -u clean.py
    depends_on:
      - kafka
    restart: unless-stopped

  cloud_actuate:
    build: 
      context: ./cloud/actuate
      dockerfile: ../../Dockerfile
    command: python3 -u actuate.py 
    depends_on:
      - kafka
    restart: unless-stopped


  ################################## COSES DE KAFKA ##################################
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: yes 
      ADMIN_ENABLE_SERVER: no
      ZOO_LOG_LEVEL: WARN 


  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9092:9092

    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT : zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      ALLOW_ANONYMOUS_LOGIN: yes
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper
    
      ################################## INFLUXDB ##################################

  influxdb:
    image: influxdb:latest
    ports:
    - 8086:8086
    volumes:
      - influxdb_vol:/var/lib/influxdb2:rw
    environment: 
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: damie
      DOCKER_INFLUXDB_INIT_PASSWORD: pollagorda69
      DOCKER_INFLUXDB_INIT_ORG: computacio
      DOCKER_INFLUXDB_INIT_BUCKET: computaciobucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: s2d3rf67ren42i0gg666er9 
      DOCKER_INFLUXDB_RETENTION: 1w

volumes:
  config:
  influxdb_vol: